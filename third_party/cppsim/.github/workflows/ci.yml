---

name: CI

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - 'test'

jobs:
  standard:
    strategy:
      fail-fast: true
      matrix:
        runs-on: [ubuntu-latest]
        python:
          - 3.7
          - 3.8
          - 3.9
          - '3.10'
    name: "Python ${{ matrix.python }} • ${{ matrix.runs-on }} • x64"
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout cppsim repository
        uses: actions/checkout@v3

      - name: Checkout res_embed repository
        uses: actions/checkout@v3
        with:
          repository: dmikushin/res_embed
          ref: master
          path: res_embed

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Prepare env
        run: |
          python3 -m pip install -U wheel build cmake pybind11
          sudo apt-get update && sudo apt-get install -y libboost-filesystem-dev --no-install-recommends

      - name: Install res_embed
        run: |
          cmake -S res_embed -B res_embed/build -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"
          cmake --build res_embed/build --target install -j2

      - name: Configure
        run: cmake -S. -Bbuild -DCMAKE_PREFIX_PATH=$PWD/install -Dpybind11_DIR="$(python3 -m pybind11 --cmakedir)"

      - name: Build & install
        run: cmake --build build --target all -j2 -v


  # ============================================================================

  macos:
    runs-on: macos-11
    name: "MacOS 11 • ${{ matrix.xcode }} • x64"
    env:
      DEVELOPER_DIR: "/Applications/${{ matrix.xcode }}.app/Contents/Developer"
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
    strategy:
      fail-fast: false
      matrix:
        xcode:
          - "Xcode_11.7"    # Not available on macos-12
          - "Xcode_12.4"    # Not available on macos-12
          - "Xcode_12.5.1"  # Not available on macos-12
          # - "Xcode_13.0"    # Not available on macos-12
          - "Xcode_13.1"
          - "Xcode_13.2.1"
          # - "Xcode_13.3.1"  # macos-12 only
          # - "Xcode_13.4.1"  # macos-12 only
    steps:
      - name: Checkout cppsim repository
        uses: actions/checkout@v3

      - name: Checkout res_embed repository
        uses: actions/checkout@v3
        with:
          repository: dmikushin/res_embed
          ref: master
          path: res_embed

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install NASM
        uses: ilammy/setup-nasm@v1

      - name: Prepare env
        run: |
          python3 -m pip install -U wheel build cmake pybind11
          brew install libomp boost

      - name: Install res_embed
        run: |
          cmake -S res_embed -B res_embed/build -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"
          cmake --build res_embed/build --target install -j2

      - name: Configure
        run: cmake -S. -Bbuild -DCMAKE_PREFIX_PATH=$PWD/install -Dpybind11_DIR="$(python3 -m pybind11 --cmakedir)"

      - name: Build & install
        run: cmake --build build --target all -j2

  # ============================================================================

  gcc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        gcc:
          - 7  # C++17 earliest version
          - 8
          - 9
          - 10
          - 11
          - 12
    name: "GCC ${{ matrix.gcc }} • x64"
    container: "gcc:${{ matrix.gcc }}"
    steps:
      - name: Checkout cppsim repository
        uses: actions/checkout@v3

      - name: Checkout res_embed repository
        uses: actions/checkout@v3
        with:
          repository: dmikushin/res_embed
          ref: master
          path: res_embed

      - name: Prepare env
        run: >
          apt-get update && apt-get install -y python3-dev python3-pip python3-setuptools python3-wheel python3-venv
          libboost-filesystem-dev --no-install-recommends

      - name: Prepare env
        run: |
          python3 -m pip install -U wheel build
          python3 -m pip install -U pybind11
          python3 -m pip install cmake --only-binary :all:

      - name: Install res_embed
        run: |
          cmake -S res_embed -B res_embed/build -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"
          cmake --build res_embed/build --target install -j2

      - name: Configure
        run: cmake -S. -Bbuild -DCMAKE_PREFIX_PATH=$PWD/install -Dpybind11_DIR=$(python3 -m pybind11 --cmakedir)

      - name: Build & install
        run: cmake --build build --target all -j2

  # ============================================================================

  clang:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        clang:
          - 7
          - 8
          - 9
          - 10   # first version for full C++17 support (with patches)
          - 11
          - 12
          - 13
          - 14
    env:
      CC: clang
      CXX: clang++

    name: "Clang ${{ matrix.clang }} • x64"
    container: "silkeh/clang:${{ matrix.clang }}"
    steps:
      - name: Checkout cppsim repository
        uses: actions/checkout@v3

      - name: Checkout res_embed repository
        uses: actions/checkout@v3
        with:
          repository: dmikushin/res_embed
          ref: master
          path: res_embed

      - name: Prepare env
        run: >
          apt-get update && apt-get install -y python3-dev python3-pip python3-setuptools python3-wheel python3-venv
          libboost-filesystem-dev --no-install-recommends

      - name: Prepare env
        run: python3 -m pip install -U wheel build cmake pybind11

      - name: Install res_embed
        run: |
          cmake -S res_embed -B res_embed/build -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"
          cmake --build res_embed/build --target install -j2

      - name: Configure
        run: cmake -S. -Bbuild -DCMAKE_PREFIX_PATH=$PWD/install -Dpybind11_DIR=$(python3 -m pybind11 --cmakedir)

      - name: Build & install
        run: cmake --build build --target all -j2

  # ============================================================================

  msvc:
    runs-on: windows-latest
    name: "MSVC • x64"
    steps:
      - name: Checkout cppsim repository
        uses: actions/checkout@v3

      - name: Checkout res_embed repository
        uses: actions/checkout@v3
        with:
          repository: dmikushin/res_embed
          ref: master
          path: res_embed

      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.12.0

      - name: Install NASM
        uses: ilammy/setup-nasm@v1

      - name: Prepare env
        run: python3 -m pip install -U wheel build cmake pybind11

      - name: Install res_embed
        env:
          CC: cl
          CXX: cl
        run: |
          cmake -S res_embed -B res_embed/build -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" -DMSVC_ITERATOR_DEBUG=ON
          cmake --build res_embed/build --target install -j2 --config Release

      - name: Configure
        env:
          CC: cl
          CXX: cl
        run: >
          cmake -S. -Bbuild -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"
          -DMSVC_ITERATOR_DEBUG=ON
          -Dpybind11_DIR="$(python3 -m pybind11 --cmakedir)"

      - name: Build & install
        run: cmake --build build --config Release -j2

  # ============================================================================

  mingw64:
    runs-on: windows-2022
    strategy:
      fail-fast: false
    name: "MINGW64 • x64"
    env:
      BOOST_VERSION: 1.78.0
      BOOST_PATH: ${{github.workspace}}/boost/boost
    steps:
      - name: Checkout cppsim repository
        uses: actions/checkout@v3

      - name: Checkout res_embed repository
        uses: actions/checkout@v3
        with:
          repository: dmikushin/res_embed
          ref: master
          path: res_embed

      - name: Install NASM
        uses: ilammy/setup-nasm@v1

      - name: Set up MinGW64
        uses: egor-tensin/setup-mingw@v2
        id: mingw64-setup
        with:
          platform: x64

      - name: Download and install Boost
        uses: MarkusJx/install-boost@v2.4.0
        if: steps.cache-boost.outputs.cache-hit != 'true'
        id: install-boost
        with:
          boost_version: ${{ env.BOOST_VERSION }}
          platform_version: 2022
          toolset: mingw

      - name: Prepare env
        run: python3 -m pip install -U wheel build cmake pybind11

      - name: Install res_embed
        env:
          CC: ${{ steps.mingw64-setup.outputs.gcc }}
          CXX: ${{ steps.mingw64-setup.outputs.gxx }}
        run: |
          cmake -S res_embed -B res_embed/build -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" -DMSVC_ITERATOR_DEBUG=ON -G "MinGW Makefiles"
          cmake --build res_embed/build --target install -j2

      - name: Configure
        env:
          BOOST_ROOT: ${{ env.BOOST_PATH }}
          CC: ${{ steps.mingw64-setup.outputs.gcc }}
          CXX: ${{ steps.mingw64-setup.outputs.gxx }}
        run: >
          cmake -S. -Bbuild -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"
          -DMSVC_ITERATOR_DEBUG=ON
          -Dpybind11_DIR="$(python3 -m pybind11 --cmakedir)"
          -G "MinGW Makefiles"

      - name: Build & install
        run: cmake --build build --target all -j2

  # ============================================================================

  msys2:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - msystem: MINGW64
            installdeps: >-
              git
              patch
              make
              mingw-w64-x86_64-toolchain
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-boost
              mingw-w64-x86_64-dlfcn
              mingw-w64-x86_64-nasm
              mingw-w64-x86_64-python
              mingw-w64-x86_64-python-pip
            cmake_generator: -G "MSYS Makefiles"
            CC: gcc
            CXX: g++

          - msystem: CLANG64
            installdeps: >-
              git
              patch
              make
              mingw-w64-clang-x86_64-toolchain
              mingw-w64-clang-x86_64-libssp
              mingw-w64-clang-x86_64-cmake
              mingw-w64-clang-x86_64-boost
              mingw-w64-clang-x86_64-dlfcn
              mingw-w64-clang-x86_64-nasm
              mingw-w64-clang-x86_64-python
              mingw-w64-clang-x86_64-python-pip
            cmake_generator: -G "MSYS Makefiles"
            CC: clang
            CXX: clang++

          - msystem: UCRT64
            installdeps: >-
              git
              patch
              make
              mingw-w64-ucrt-x86_64-toolchain
              mingw-w64-ucrt-x86_64-cmake
              mingw-w64-ucrt-x86_64-boost
              mingw-w64-ucrt-x86_64-dlfcn
              mingw-w64-ucrt-x86_64-nasm
              mingw-w64-ucrt-x86_64-python
              mingw-w64-ucrt-x86_64-python-pip
            cmake_generator: -G "MSYS Makefiles"
            CC: gcc
            CXX: g++

    name: "MSYS2 ${{ matrix.msystem }} • x64"
    steps:
      - name: Checkout cppsim repository
        uses: actions/checkout@v3

      - name: Checkout res_embed repository
        uses: actions/checkout@v3
        with:
          repository: dmikushin/res_embed
          ref: master
          path: res_embed

      - name: Setup MSYS
        uses: msys2/setup-msys2@v2
        with:
          install: ${{ matrix.installdeps }}
          msystem: ${{ matrix.msystem }}
          path-type: strict
          update: false

      - name: Prepare env
        shell: msys2 {0}
        env:
          CC: ${{ matrix.CC }}
          CXX: ${{ matrix.CXX }}
        run: python3 -m pip install -U wheel build pybind11

      - name: Install res_embed
        shell: msys2 {0}
        env:
          CC: ${{ matrix.CC }}
          CXX: ${{ matrix.CXX }}
        run: |
          cmake -S res_embed -B res_embed/build -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" \
          ${{ matrix.cmake_generator }}
          cmake --build res_embed/build --target install -j2 -v

      - name: Configure
        shell: msys2 {0}
        env:
          CC: ${{ matrix.CC }}
          CXX: ${{ matrix.CXX }}
        run: >
          cmake -S. -Bbuild -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"
          -Dpybind11_DIR="$(python3 -m pybind11 --cmakedir)"
          ${{ matrix.cmake_generator }}

      - name: Build & install
        run: cmake --build build --target all -j2 -v

  # ============================================================================

  cygwin:
    runs-on: windows-latest
    name: "Cygwin • x64"
    env:
      CYGWIN_NOWINPATH: 1  # only have cygwin's executables on PATH
      CHERE_INVOKING: 1  # prevent profile script to change directory
      CCACHE_VERSION: 4.6.1
    steps:
      - run: git config --global core.autocrlf input

      - name: Checkout cppsim repository
        uses: actions/checkout@v3

      - name: Checkout res_embed repository
        uses: actions/checkout@v3
        with:
          repository: dmikushin/res_embed
          ref: master
          path: res_embed

      - name: Setup Cygwin
        uses: cygwin/cygwin-install-action@v2
        with:
          packages: >-
            cygwin cygwin-devel
            autoconf automake coreutils m4 make cmake patch git
            gawk sed libtool gettext wget curl grep
            gzip bzip2 tar xz nasm
            binutils gcc-core gcc-g++ libboost-devel
            python3 python3-devel python3-pip python3-virtualenv

      - name: Prepare env
        env:
          PATH: C:\cygwin\bin
        shell: bash --login -eo pipefail -o igncr {0}
        run: |
          python3 -m pip install -U wheel build
          python3 -m pip install -U pybind11

      - name: Install res_embed
        env:
          PATH: C:\cygwin\bin
        shell: bash --login -eo pipefail -o igncr {0}
        run: |
          cmake -S res_embed -B res_embed/build -DCMAKE_INSTALL_PREFIX="$PWD/install"
          cmake --build res_embed/build --target install -j2 -v

      - name: Configure
        env:
          PATH: C:\cygwin\bin
        shell: bash --login -eo pipefail -o igncr {0}
        run: >
          cmake -S. -Bbuild -DCMAKE_PREFIX_PATH="$PWD/install"
          -Dpybind11_DIR="$(python3 -m pybind11 --cmakedir)"

      - name: Build & install
        env:
          PATH: C:\cygwin\bin
        shell: bash --login -eo pipefail -o igncr {0}
        run: cmake --build build --target all -j2 -v

      - name: Restore PATH for git
        run: Add-Content -Path $env:GITHUB_PATH -Value "C:\Program Files\Git\bin"
