diff -aur quest-src-old/QuEST/CMakeLists.txt quest-src/QuEST/CMakeLists.txt
--- quest-src-old/QuEST/CMakeLists.txt	2021-10-05 12:06:40.000000000 +0200
+++ quest-src/QuEST/CMakeLists.txt	2021-10-05 12:10:45.000000000 +0200
@@ -29,9 +29,11 @@
 
 option(GPUACCELERATED "Whether to program will run on GPU. Set to 1 to enable" 0)
 
-set(GPU_COMPUTE_CAPABILITY 30 CACHE STRING "GPU hardware dependent, lookup at https://developer.nvidia.com/cuda-gpus. Write without fullstop")
-
-
+if(NOT DEFINED GPU_COMPUTE_CAPABILITY)
+  set(GPU_COMPUTE_CAPABILITY 30 CACHE STRING "GPU hardware dependent, lookup at https://developer.nvidia.com/cuda-gpus. Write without fullstop")
+else()
+  set(GPU_COMPUTE_CAPABILITY ${GPU_COMPUTE_CAPABILITY} CACHE STRING "GPU hardware dependent, lookup at https://developer.nvidia.com/cuda-gpus. Write without fullstop")
+endif()
 
 # *****************************************************************************
 # ***** NO CHANGES SHOULD BE REQUIRED FROM THE USER BEYOND THIS POINT *********
@@ -40,6 +42,9 @@
 # Show the user their settings
 message(STATUS "Precision is ${PRECISION}")
 message(STATUS "GPU acceleration is ${GPUACCELERATED}")
+if(CUDA_STATIC)
+    message(STATUS "Using static CUDA")
+endif()
 message(STATUS "OMP acceleration is ${MULTITHREADED}")
 message(STATUS "MPI distribution is ${DISTRIBUTED}")
 
@@ -50,7 +55,7 @@
 
 # ----- FATAL -----------------------------------------------------------------
 
-if (${DISTRIBUTED} AND ${GPUACCELERATED})
+if (DISTRIBUTED AND GPUACCELERATED)
     message(FATAL_ERROR "DISTRIBUTED=${DISTRIBUTED} and \
         GPUACCELERATED=${GPUACCELERATED} set but \
         distributed GPU acceleration not supported. Aborting")
@@ -65,14 +70,14 @@
 endif()
 
 if ( (${PRECISION} EQUAL 4) AND 
-        ${GPUACCELERATED} )
+        GPUACCELERATED )
     message(FATAL_ERROR "PRECISION=${PRECISION} but quad precision is not \
         supported on GPU. Aborting")
 endif()
 
 # ----- WARNINGS --------------------------------------------------------------
 
-if (${GPUACCELERATED} AND ${MULTITHREADED})
+if (GPUACCELERATED AND MULTITHREADED)
     message(WARNING "MULTITHREADED=${MULTITHREADED} and \
         GPUACCELERATED=${GPUACCELERATED} set but GPU \
         version makes no use of multithreading. Ignoring multithreading settings")
@@ -80,13 +85,13 @@
 
 #TODO Add other supported Clang versions if found
 if ( ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang") AND 
-        ${GPUACCELERATED} AND
+        GPUACCELERATED AND
         NOT("${CMAKE_C_COMPILER_VERSION}" STREQUAL "3.7.0") )
     message(WARNING "Some versions of Clang are not NVIDIA-GPU compatible. \
         If compilation fails, try Clang 3.7.")
 endif()
 
-if ( ${GPUACCELERATED} AND 
+if ( GPUACCELERATED AND 
     ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU") AND
     ("${CMAKE_SYSTEM_NAME}" STREQUAL "DARWIN") ) # DARWIN means Mac OS X
     message(WARNING "On some platforms (e.g. OSX), NVIDIA-GPUs are not \
@@ -109,11 +114,47 @@
 endif()
 
 if (GPUACCELERATED)
-    find_package(CUDA REQUIRED)
-    # Stop nvcc sending c compile flags through using -Xcompiler and breaking
-    # on compilation of a cpp file receiving -std=c99. In long term should figure 
-    # out why CMAKE_C_FLAGS and not CMAKE_CXX_FLAGS are being sent through to a cpp file
-    set(CUDA_PROPAGATE_HOST_FLAGS FALSE)
+    enable_language(CUDA)
+    if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.17)
+        find_package(CUDAToolkit REQUIRED)
+    else()
+        find_package(CUDA REQUIRED)
+
+        if(CUDA_LIBRARIES)
+            if(NOT TARGET CUDA::cudart)
+                add_library(CUDA::cudart IMPORTED INTERFACE)
+                target_include_directories(CUDA::cudart SYSTEM INTERFACE "${CUDA_INCLUDE_DIRS}")
+                target_link_libraries(CUDA::cudart INTERFACE "${CUDA_LIBRARIES}")
+            endif()
+        endif()
+
+        if(CUDA_cudart_static_LIBRARY)
+            if(NOT TARGET CUDA::cudart_static)
+                add_library(CUDA::cudart_static IMPORTED INTERFACE)
+                target_include_directories(CUDA::cudart_static SYSTEM INTERFACE "${CUDA_INCLUDE_DIRS}")
+                target_link_libraries(CUDA::cudart_static INTERFACE "${CUDA_cudart_static_LIBRARY}" Threads::Threads)
+            endif()
+        endif()
+        find_library(
+            CUDA_driver_LIBRARY
+            NAMES cuda_driver cuda
+            HINTS ${CUDA_TOOLKIT_ROOT_DIR} ENV CUDA_PATH
+            PATH_SUFFIXES nvidia/current lib64 lib/x64 lib)
+        if(NOT CUDA_driver_LIBRARY)
+            # Don't try any stub directories until we have exhausted all other search locations.
+            find_library(
+                CUDA_driver_LIBRARY
+                NAMES cuda_driver cuda
+                HINTS ${CUDA_TOOLKIT_ROOT_DIR} ENV CUDA_PATH
+                PATH_SUFFIXES lib64/stubs lib/x64/stubs lib/stubs stubs)
+        endif()
+        mark_as_advanced(CUDA_driver_LIBRARY)
+        if(CUDA_driver_LIBRARY)
+            add_library(CUDA::cuda_driver IMPORTED INTERFACE)
+            target_include_directories(CUDA::cuda_driver SYSTEM INTERFACE "${CUDA_INCLUDE_DIRS}")
+            target_link_libraries(CUDA::cuda_driver INTERFACE "${CUDA_driver_LIBRARY}")
+        endif()
+    endif()
 endif()
 
 
@@ -125,7 +166,7 @@
 
 # ----- OPENMP ----------------------------------------------------------------
 
-if (${MULTITHREADED} AND NOT ${GPUACCELERATED})
+if (MULTITHREADED AND NOT GPUACCELERATED)
   find_package(OpenMP)
 
   # If found, we must also check the version
@@ -149,21 +190,17 @@
 # ----- CUDA FLAGS ------------------------------------------------------------
 
 if (GPUACCELERATED)
-    set (CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} \
-        -arch=compute_${GPU_COMPUTE_CAPABILITY} -code=sm_${GPU_COMPUTE_CAPABILITY}"
-    )
+  if(CMAKE_VERSION VERSION_LESS 3.18)
+    set(CMAKE_CUDA_FLAGS
+      "${CMAKE_CUDA_FLAGS} -arch=compute_${GPU_COMPUTE_CAPABILITY} -code=sm_${GPU_COMPUTE_CAPABILITY}")
+  endif()
+
     if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
-        set (CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} \
-            -O2"
-        )
+        set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -O2")
     elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
-        set (CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} \
-            -G -g -lineinfo"
-        )
+        set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G -g -lineinfo")
     else()
-        set (CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} \
-            -O2"
-        )
+        set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -O2")
     endif()
 endif()
 
@@ -215,11 +252,6 @@
 
 # ----- C++ COMPILER FLAGS --------------------------------------------------
 
-# set C++ flags that are common between compilers and build types
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} \
-    -std=c++98 -Wall"
-)
-
 # Use -O2 for all but debug mode by default 
 if (NOT("${CMAKE_BUILD_TYPE}" STREQUAL "Debug"))
     set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} \
@@ -284,9 +316,13 @@
 add_subdirectory(src)
 
 if (GPUACCELERATED)
-    cuda_add_library(QuEST SHARED
+    add_library(QuEST SHARED
         ${QuEST_SRC}
-    )
+      )
+
+    if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.18)
+      set_target_properties(QuEST PROPERTIES CUDA_ARCHITECTURES ${GPU_COMPUTE_CAPABILITY})
+    endif()
 elseif (WIN32)
     add_library(QuEST STATIC
         ${QuEST_SRC}
@@ -300,8 +336,7 @@
 # ----- Location of header files ----------------------------------------------
 
 target_include_directories(QuEST 
-    PRIVATE src
-    PUBLIC include
+    PUBLIC src include
 )
 
 
@@ -328,7 +363,9 @@
 
 # ----- GPU -------------------------------------------------------------------
 
-target_link_libraries(QuEST ${CUDA_LIBRARIES})
+if (GPUACCELERATED)
+    target_link_libraries(QuEST PUBLIC $<IF:$<BOOL:${CUDA_STATIC}>,CUDA::cudart_static,CUDA::cudart>)
+endif()
 
 
 # ----- Coverage testing with GCC or Clang ------------------------------------
