include: .gitlab/hashes.yml

variables:
  CMAKE_VERSION: 3.22.3
  GIT_SSL_NO_VERIFY: "true"

default:
  before_script:
    - env
    - mkdir -p cache/apt/archives/partial
    - echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/01-keep-debs
    - echo 'Acquire::http::Proxy "http://172.17.0.1:3128";' > /etc/apt/apt.conf.d/02-proxy
    - echo "Dir::Cache ${CI_PROJECT_DIR}/cache/apt;" > /etc/apt/apt.conf.d/03-cache-debs
    - echo 'deb http://debian.ethz.ch/debian bullseye main' > /etc/apt/sources.list
    - echo 'deb http://debian.ethz.ch/debian-security bullseye-security main' >> /etc/apt/sources.list
    - echo 'deb http://debian.ethz.ch/debian bullseye-updates main' >> /etc/apt/sources.list
    - echo -e "[global]\ncache-dir = ${CI_PROJECT_DIR}/cache/pip" > /usr/pip.conf
    - >-
        apt-get update && apt-get install -y python3-dev python3-pip
        python3-setuptools python3-wheel python3-venv libboost-filesystem-dev
        --no-install-recommends
    - |
      if [ ! -e cmake-${CMAKE_VERSION}-linux-x86_64.sh ]; then
        url_base='https://github.com/Kitware/CMake/releases/download'
        wget ${url_base}/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
      fi
      bash cmake-${CMAKE_VERSION}-linux-x86_64.sh --skip-license --prefix=/usr/local


gcc:
  image: gcc:${GCC}
  inherit:
    default: true

  parallel:
    matrix:
      - GCC: [7, 9]

  cache:
    key: gcc-${GCC}-${OVERALL_HASH}
    paths:
      - build/.mqlibs
      - cache
      - cmake-${CMAKE_VERSION}-linux-x86_64.sh
      - venv

  script:
    - ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --configure -j 2

clang:
  image: silkeh/clang:${CLANG}
  inherit:
    default: true

  variables:
    CC: clang
    CXX: clang++

  parallel:
    matrix:
      - CLANG: [7, 10]

  cache:
    key: clang-${clang}-${OVERALL_HASH}
    paths:
      - build/.mqlibs
      - cache
      - cmake-${CMAKE_VERSION}-linux-x86_64.sh
      - venv

  script:
    - ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --configure -j 2
