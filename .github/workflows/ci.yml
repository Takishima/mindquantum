---

name: CI

on:
  workflow_dispatch:
  push:

jobs:
  standard:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-latest]
        python:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
          - '3.10'
    env:
      CMAKE_VERSION: 3.22.3
    name: "Python ${{ matrix.python }} • ${{ matrix.runs-on }} • x64"
    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v2

      - name: Get history and tags for SCM versioning to work
        if: ${{ !env.ACT }}
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*¨

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: 'x64'

      - name: Prepare env
        run: >
          sudo apt-get update && sudo apt-get install -y libboost-filesystem-dev
          --no-install-recommends

      - name: Cache CMake installer
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
          key: cmake-${{ env.CMAKE_VERSION }}

      - name: Install latest CMake
        run: |
          if [ ! -e cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh ]; then
            url_base='https://github.com/Kitware/CMake/releases/download'
            wget ${url_base}/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
          fi
          sudo bash cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh --skip-license --prefix=/usr/local

      - name: Cache Python virtualenv
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: venv
          # yamllint disable-line rule:line-length
          key: ${{ matrix.runs-on }}-python-${{ matrix.python }}-python-venv-${{ hashFiles('build_locally.sh') }}-${{ secrets.cache_ver }}

      - name: Cache compiled third-party libraries
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: build/.mqlibs
          # yamllint disable-line rule:line-length
          key: ${{ matrix.runs-on }}-python-${{ matrix.python }}-third-party-libs-${{ hashFiles('third_party/**') }}-${{ secrets.cache_ver }}

      - name: Configure
        run: ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --configure-only -c

      - name: Build
        run: ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake

  # ============================================================================

  gcc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        gcc:
          - 7  # C++17 earliest version
          - 8
          - 9
          - 10
          - latest
    env:
      CMAKE_VERSION: 3.22.3
    name: "GCC ${{ matrix.gcc }} • x64"
    container: "gcc:${{ matrix.gcc }}"
    steps:
      - uses: actions/checkout@v2

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Prepare env
        run: >
          apt-get update && apt-get install -y python3-dev python3-pip
          python3-setuptools python3-wheel python3-venv libboost-filesystem-dev
          --no-install-recommends

      - name: Cache CMake installer
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
          key: cmake-${{ env.CMAKE_VERSION }}

      - name: Install latest CMake
        run: |
          if [ ! -e cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh ]; then
            url_base='https://github.com/Kitware/CMake/releases/download'
            wget ${url_base}/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
          fi
          bash cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh --skip-license --prefix=/usr/local

      - name: Cache Python virtualenv
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: venv
          key: gcc-python-venv-${{ hashFiles('build_locally.sh') }}-${{ secrets.cache_ver }}

      - name: Cache compiled third-party libraries
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: build/.mqlibs
          key: gcc-${{ matrix.gcc }}-third-party-libs-${{ hashFiles('third_party/**') }}-${{ secrets.cache_ver }}

      - name: Configure
        run: ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --configure-only -c

      - name: Build
        run: ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake

  # ============================================================================

  clang:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        clang:
          - 7
          - 8
          - 9
          - 10   # first version for full C++17 support (with patches)
          - 11
          - 12
          - latest
    env:
      CC: clang
      CXX: clang++
      CMAKE_VERSION: 3.22.3

    name: "Clang ${{ matrix.clang }} • x64"
    container: "silkeh/clang:${{ matrix.clang }}"
    steps:
      - uses: actions/checkout@v2

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Prepare env
        run: >
          apt-get update && apt-get install -y python3-dev python3-pip
          python3-setuptools python3-wheel python3-venv
          --no-install-recommends

      - name: Cache CMake installer
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
          key: cmake-${{ env.CMAKE_VERSION }}

      - name: Install latest CMake
        run: |
          if [ ! -e cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh ]; then
            url_base='https://github.com/Kitware/CMake/releases/download'
            wget ${url_base}/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
          fi
          bash cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh --skip-license --prefix=/usr/local

      - name: Cache Python virtualenv
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: venv
          key: clang-python-venv-${{ hashFiles('build_locally.sh') }}-${{ secrets.cache_ver }}

      - name: Cache compiled third-party libraries
        if: ${{ !env.ACT }}
        uses: actions/cache@v2
        with:
          path: build/.mqlibs
          key: clang-${{ matrix.clang }}-third-party-libs-${{ hashFiles('third_party/**') }}-${{ secrets.cache_ver }}

      - name: Configure
        run: ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --configure-only -c

      - name: Build
        run: ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake

  # ============================================================================

  msvc:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    name: "MSVC • x64"
    steps:
      - uses: actions/checkout@v2

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Cache Python virtualenv
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: venv
          key: msvc-python-venv-${{ hashFiles('build_locally.ps1') }}-${{ secrets.cache_ver }}

      - name: Cache compiled third-party libraries
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: build/.mqlibs
          key: msvc-third-party-libs-${{ hashFiles('third_party/**') }}-${{ secrets.cache_ver }}

      - name: Configure
        run: >-
           ./build_locally.ps1 -Cxx -WithProjectq -WithoutQuest -DebugCmake -ConfigureOnly -C
           -DUSE_PARALLEL_STL=OFF -DPATCH_USE_NATIVE_ENCODING=ON

      - name: Build
        run: >-
           ./build_locally.ps1 -Cxx -WithProjectq -WithoutQuest -DebugCmake
           -DUSE_PARALLEL_STL=OFF -DPATCH_USE_NATIVE_ENCODING=ON

  # ============================================================================

  # NB: Disabled due to compilation error in tweedledum library
  # mingw64:
  #   runs-on: windows-2022
  #   strategy:
  #     fail-fast: false
  #   name: "MINGW64 • x64"
  #   env:
  #     BOOST_VERSION: 1.78.0
  #     BOOST_PATH: ${{github.workspace}}/boost/boost

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Get history and tags for SCM versioning to work
  #       run: |
  #         git fetch --prune --unshallow
  #         git fetch --depth=1 origin +refs/tags/*:refs/tags/*

  #     - name: Cache Python virtualenv
  #       if: ${{ !env.ACT }}
  #       uses: actions/cache@v3
  #       with:
  #         path: venv
  #         key: mingw64-python-venv-${{ hashFiles('build_locally.ps1') }}-${{ secrets.cache_ver }}

  #     - name: Cache compiled third-party libraries
  #       if: ${{ !env.ACT }}
  #       uses: actions/cache@v3
  #       with:
  #         path: build/.mqlibs
  #         key: mingw64-third-party-libs-${{ hashFiles('third_party/**') }}-${{ secrets.cache_ver }}

  #     # - name: Setup MinGW
  #     #   uses: egor-tensin/setup-mingw@v2

  #     - name: Cache boost
  #       uses: actions/cache@v2
  #       id: cache-boost
  #       with:
  #         path: ${{ env.BOOST_PATH }}
  #         key: boost-${{ env.BOOST_VERSION }}

  #     - name: Download and install Boost
  #       uses: MarkusJx/install-boost@v2.2.0
  #       if: steps.cache-boost.outputs.cache-hit != 'true'
  #       id: install-boost
  #       with:
  #         boost_version: ${{ env.BOOST_VERSION }}
  #         platform_version: 2022
  #         toolset: mingw

  #     - name: Configure
  #       env:
  #         BOOST_ROOT: ${{ env.BOOST_PATH }}
  #       run: >-
  #          ./build_locally.ps1 -Cxx -WithProjectq -WithoutQuest -DebugCmake -ConfigureOnly -C
  #          -DUSE_PARALLEL_STL=OFF -DPATCH_USE_NATIVE_ENCODING=ON -G "MinGW Makefiles"

  #     - name: Build
  #       env:
  #         BOOST_ROOT: ${{ env.BOOST_PATH }}
  #       run: >-
  #          ./build_locally.ps1 -Cxx -WithProjectq -WithoutQuest -DebugCmake
  #          -DUSE_PARALLEL_STL=OFF -DPATCH_USE_NATIVE_ENCODING=ON -G "MinGW Makefiles"

  # ============================================================================

  msys2:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - msystem: MINGW64
            installdeps: >-
              git
              patch
              make
              mingw-w64-x86_64-toolchain
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-python
              mingw-w64-x86_64-python-pip
            cmake_generator: -- -G "MSYS Makefiles"

          - msystem: MSYS
            installdeps: >-
              git
              base-devel
              gcc
              cmake
              python-devel
              python-pip
              gmp-devel
            cmake_generator:

    name: "MSYS2 ${{ matrix.msystem }} • x64"
    steps:
      - uses: actions/checkout@v2

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Setup MSYS
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: false
          install: ${{ matrix.installdeps }}

      - name: Cache Python virtualenv
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: venv
          key: msys2-${{ matrix.msystem }}-python-venv-${{ hashFiles('build_locally.sh') }}-${{ secrets.cache_ver }}

      - name: Cache compiled third-party libraries
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: build/.mqlibs
          key: msys2-${{ matrix.msystem }}-third-party-libs-${{ hashFiles('third_party/**') }}-${{ secrets.cache_ver }}

      - name: Configure
        shell: msys2 {0}
        run: >-
          ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --configure-only -c
          ${{ matrix.cmake_generator }}

      - name: Build
        shell: msys2 {0}
        run: ./build_locally.sh --cxx --with-projectq --debug-cmake

  # ============================================================================

  cygwin:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    name: "Cygwin • x64"
    steps:
      - run: git config --global core.autocrlf input

      - uses: actions/checkout@v2

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Setup Cygwin
        uses: cygwin/cygwin-install-action@v2
        with:
          packages: >-
            autoconf automake binutils m4 make cmake patch
            gzip bzip2 tar xz
            flex file findutils groff gawk sed libtool gettext wget curl grep dos2unix
            git
            gcc-core gcc-g++
            libgmp-devel
            python3 python3-devel python3-pip python3-virtualenv

      - name: Cache Python virtualenv
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: venv
          key: cygwin-python-venv-${{ hashFiles('build_locally.sh') }}-${{ secrets.cache_ver }}

      - name: Cache compiled third-party libraries
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: build/.mqlibs
          key: cygwin-third-party-libs-${{ hashFiles('third_party/**') }}-${{ secrets.cache_ver }}

      - name: Configure
        env:
          PATH: C:\cygwin\bin
        shell: bash --noprofile --norc -e -o pipefail -o igncr {0}
        run: ./build_locally.sh --cxx --with-projectq --without-quest --debug-cmake --configure-only -c

      - name: Build
        env:
          PATH: C:\cygwin\bin
        shell: bash --noprofile --norc -e -o pipefail -o igncr {0}
        run: ./build_locally.sh --cxx --with-projectq --without-quest --debug-cmake

  # ============================================================================

  nvhpc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        nvhpc:
          - 20.11-devel-cuda11.1
          - 22.3-devel-cuda11.6
    env:
      CMAKE_VERSION: 3.22.3
      CC: gcc
      CXX: g++
    name: "NVHPC ${{ matrix.nvhpc }} • x64"
    container: "nvcr.io/nvidia/nvhpc:${{ matrix.nvhpc }}-ubuntu20.04"
    steps:
      - uses: actions/checkout@v2

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Prepare env
        run: >
          apt-get update && apt-get install -y python3-dev python3-pip
          python3-setuptools python3-wheel python3-venv libboost-filesystem-dev
          --no-install-recommends

      - name: Cache CMake installer
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
          key: cmake-${{ env.CMAKE_VERSION }}

      - name: Install latest CMake
        run: |
          if [ ! -e cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh ]; then
            url_base='https://github.com/Kitware/CMake/releases/download'
            wget ${url_base}/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh
          fi
          bash cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh --skip-license --prefix=/usr/local

      - name: Cache Python virtualenv
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: venv
          key: nvhpc-python-venv-${{ hashFiles('build_locally.sh') }}-${{ secrets.cache_ver }}

      - name: Cache compiled third-party libraries
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: build/.mqlibs
          key: nvhpc-${{ matrix.nvhpc }}-third-party-libs-${{ hashFiles('third_party/**') }}-${{ secrets.cache_ver }}

      - name: Configure
        run: ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --gpu --configure-only -c

      - name: Build
        run: ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --gpu

  # ============================================================================

  # NB: Disabled due to compilation error in tweedledum library
  # intel:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       - name: ICX-ICPX
  #         cc: icx
  #         cxx: icpx
  #         apt_pkg: intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
  #       - name: DPC++
  #         cc: dpcpp
  #         cxx: dpcpp
  #         apt_pkg: intel-oneapi-compiler-dpcpp-cpp

  #   name: "Intel ${{ matrix.name }} • x64"
  #   env:
  #     CC: ${{ matrix.cc }}
  #     CXX: ${{ matrix.cxx }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Get history and tags for SCM versioning to work
  #       run: |
  #         git fetch --prune --unshallow
  #         git fetch --depth=1 origin +refs/tags/*:refs/tags/*

  #     - name: Setup Intel APT
  #       run: |
  #         wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
  #         sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
  #         echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
  #         sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/oneAPI.list" -o APT::Get::List-Cleanup="0"

  #     - name: Prepare env
  #       run: >
  #         apt-get update && apt-get install -y python3-dev python3-pip
  #         python3-setuptools python3-wheel python3-venv
  #         ${{ matrix.apt_pkg }}
  #         --no-install-recommends

  #     - name: Cache Python virtualenv
  #       if: ${{ !env.ACT }}
  #       uses: actions/cache@v3
  #       with:
  #         path: venv
  #         key: intel-python-venv-${{ hashFiles('build_locally.sh') }}-${{ secrets.cache_ver }}

  #     - name: Cache compiled third-party libraries
  #       if: ${{ !env.ACT }}
  #       uses: actions/cache@v3
  #       with:
  #         path: build/.mqlibs
  #         key: >-
  #           intel-${{ matrix.cc }}-${{ matrix.cxx }}-clang-third-party-libs-${{ hashFiles('third_party/**') }}
  #           -${{ secrets.cache_ver }}

  #     - name: Configure
  #       run: |
  #         source /opt/intel/oneapi/compiler/latest/env/vars.sh
  #         if [ -f /opt/intel/oneapi/tbb/latest/env/vars.sh ]; then
  #           source /opt/intel/oneapi/tbb/latest/env/vars.sh
  #         fi
  #         ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --gpu --configure-only -c

  #     - name: Build
  #       run: |
  #         source /opt/intel/oneapi/compiler/latest/env/vars.sh
  #         if [ -f /opt/intel/oneapi/tbb/latest/env/vars.sh ]; then
  #           source /opt/intel/oneapi/tbb/latest/env/vars.sh
  #         fi
  #         ./build_locally.sh --cxx --with-projectq --with-quest --debug-cmake --gpu
